{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TasksList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","state","value","checked","defaultDate","Date","toISOString","slice","handleChange","e","target","type","setState","handleClick","length","alert","props","addTasks","minDate","maxDate","className","htmlFor","id","placeholder","name","this","onChange","min","max","onClick","React","Component","Task","task","text","date","important","active","finishDate","change","delete","finish","toLocaleDateString","TasksList","tasks","filter","done","sort","a","b","toLowerCase","activeTasks","map","key","doneTasks","App","counter","deleteTask","index","findIndex","splice","changeTasksStatus","Array","from","forEach","getTime","addTask","prevState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0829e875.chunk.js","sourcesContent":["import React from 'react'\r\nimport './AddTask.css'\r\n\r\nclass AddTask extends React.Component {\r\n  state = {\r\n    value: '',\r\n    checked: false,\r\n    defaultDate: new Date().toISOString().slice(0, 10)\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    if (e.target.type === 'text') {\r\n      this.setState({\r\n        value: e.target.value\r\n      })\r\n    } else if (e.target.type === 'checkbox') {\r\n      this.setState({\r\n        checked: e.target.checked\r\n      })\r\n    } else if (e.target.type === 'date') {\r\n      this.setState({\r\n        defaultDate: e.target.value\r\n      })\r\n    }\r\n  }\r\n\r\n  handleClick = () => {\r\n    const { value, defaultDate, checked } = this.state\r\n    if (value.length <= 2) return alert('Za krótkie zadanie!')\r\n    const add = this.props.addTasks(value, defaultDate, checked)\r\n    if (add) {\r\n      this.setState({\r\n        value: '',\r\n        checked: false\r\n\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const minDate = new Date().toISOString().slice(0, 10)\r\n    let maxDate = minDate.slice(0, 4) * 1 + 1;\r\n    maxDate = maxDate + \"-12-31\";\r\n    return (\r\n      <>\r\n        <div className='form'>\r\n          <label htmlFor=\"text\">\r\n            <input\r\n              id='text'\r\n              type=\"text\"\r\n              placeholder='Dodaj Zadanie...'\r\n              name='text'\r\n              value={this.state.value}\r\n              onChange={this.handleChange} />\r\n            <label htmlFor=\"checkbox\">\r\n              <input\r\n                id='checkbox'\r\n                type=\"checkbox\"\r\n                name='checkbox'\r\n                checked={this.state.checked}\r\n                onChange={this.handleChange} /> Priorytet\r\n            </label>\r\n          </label>\r\n\r\n\r\n\r\n          <label htmlFor=\"date\">\r\n            Zrobić do <input\r\n              id='date'\r\n              type=\"date\"\r\n              name='date'\r\n              min={minDate}\r\n              max={maxDate}\r\n              value={this.state.defaultDate}\r\n              onChange={this.handleChange} />\r\n          </label>\r\n        </div>\r\n        <button className='addTaskBtn' onClick={this.handleClick} >DODAJ</button>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddTask;","import React from 'react'\r\n\r\nconst Task = (props) => {\r\n  const { id, text, date, important, active, finishDate } = props.task\r\n\r\n\r\n  if (active) {\r\n    return (\r\n      <div>\r\n        <p>{important ? <strong className='important'>{text}</strong> : <strong>{text}</strong>}  do <span>{date} </span>\r\n          <button onClick={() => props.change(id)}>ZROBIONE</button>\r\n          <button onClick={() => props.delete(id)}>X</button></p>\r\n\r\n      </div>\r\n    )\r\n  } else {\r\n    const finish = new Date(finishDate).toLocaleDateString()\r\n    return (\r\n      <div>\r\n        <p><strong>{text}</strong> <span>( zrobić do {date} ) </span>\r\n          <br /><span>Potwierdzone wykonanie {finish}  </span>\r\n          <button onClick={() => props.delete(id)}>X</button></p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Task","import React from 'react'\r\nimport Task from './Task'\r\n\r\nconst TasksList = (props) => {\r\n\r\n  const active = props.tasks.filter(task => task.active === true)\r\n\r\n  const done = props.tasks.filter(task => task.active === false)\r\n\r\n  if (active.length >= 2) {\r\n    active.sort((a, b) => {\r\n\r\n      a = a.text.toLowerCase();\r\n      b = b.text.toLowerCase();\r\n\r\n      if (a < b) return -1;\r\n      if (a > b) return 1;\r\n      return 0;\r\n    })\r\n  }\r\n\r\n  if (done.length >= 2) {\r\n    done.sort((a, b) => {\r\n\r\n      a = a.finishDate\r\n      b = b.text.finishDate\r\n\r\n      if (a > b) return -1;\r\n      if (a < b) return 1;\r\n      return 0;\r\n    })\r\n  }\r\n\r\n  const activeTasks = active.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change} />)\r\n\r\n  const doneTasks = done.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change} />)\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <hr />\r\n      <div className=\"active\">\r\n        <h1>Zadania do zrobienia</h1>\r\n        {activeTasks.length > 0 ? activeTasks : <p>Brak zadań do wykonania!</p>}\r\n      </div>\r\n\r\n      <hr />\r\n\r\n      <div className=\"done\">\r\n        <h3>Zadania zrobione <span className='spanColor'>({doneTasks.length})</span></h3>\r\n        {doneTasks.length > 5 ? <span className='spanColor'>Wyświetlono 5 ostatnio wykonanych zadań.</span> : null}\r\n        {doneTasks.length > 0 ? doneTasks.slice(0, 5) : <p>Nie masz wykonanych zdań!</p>}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TasksList\r\n","import React, { Component } from 'react';\nimport AddTask from './AddTask';\nimport TasksList from './TasksList'\nimport './App.css';\n\nclass App extends Component {\n  counter = 0;\n\n  state = {\n    tasks: []\n  }\n\n  deleteTask = (id) => {\n    //Robimy 'kopie' tablicy ze state\n    const tasks = [...this.state.tasks]\n    //Wyszukujemy index elementu, zgodnego z naszym klikanym id \n    const index = tasks.findIndex(task =>\n      task.id === id\n    )\n    //Usuwamy element z tym indexem\n    tasks.splice(index, 1)\n    return (\n      //Zwracamy nową tablice bez tego indexu\n      this.setState({\n        tasks\n      })\n    )\n  }\n\n  changeTasksStatus = (id) => {\n    //Robimy 'kopie' tablicy ze state\n    let tasks = Array.from(this.state.tasks)\n    //Wyszukujemy index elementu, zgodnego z naszym klikanym id \n\n    //\n    tasks.forEach((task) => {\n      if (id === task.id) {\n        task.active = false;\n        task.finishDate = new Date().getTime()\n      }\n    })\n    return this.setState({\n      tasks\n    })\n  }\n\n  addTask = (text, date, important) => {\n    const task = {\n      id: this.counter,\n      text: text,\n      date: date,\n      important: important,\n      active: true,\n      finishDate: null\n    }\n\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task]\n    }))\n\n    this.counter++\n    return true\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <h1>ToDoApp</h1>\n        <AddTask addTasks={this.addTask} />\n        <TasksList tasks={this.state.tasks} change={this.changeTasksStatus} delete={this.deleteTask} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}